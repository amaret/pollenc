; -*- mode: clojure; -*-
; vim: filetype=clojure
(require 'capacitor.core)
(require 'capacitor.async)
(require 'clojure.core.async)

(defn make-async-influxdb-client [opts]
    (let [client (capacitor.core/make-client opts)
          events-in (capacitor.async/make-chan)
          resp-out (capacitor.async/make-chan)]
        (capacitor.async/run! events-in resp-out client 100 10000)
        (fn [series payload]
            (let [p (merge payload {
                    :series series
                    :time   (* 1000 (:time payload)) ;; s â†’ ms
                })]
                (clojure.core.async/put! events-in p)))))

(def influx (make-async-influxdb-client {
        :host     "10.0.0.11"
        :port     8086
        :username "root"
        :password "rusty_is_a_cowboy"
        :db       "clc_db"
    }))

(def email (mailer { :host "email-smtp.us-east-1.amazonaws.com"
                     :user "AKIAIC6VRZJAN6JDAB4Q"
                     :pass "Av/V0j2MmwRAI918ZcgzlTmmS/LV8RF+4ZOLTeowZSpt"
                     :ssl true
                     :body (fn [events]
                           (apply prn-str events))
                     :from "ops@amaret.com"}))

(def tell-ops (rollup 5 3600 (email "ops@amaret.com")))

(defn srch [stringthing] 
    (re-find #"=?\d+," (format "%s" stringthing))
) 

(defn num-redis-keys [stringthing] 
    (re-find #"\d+" (format "%s" (srch stringthing))
    )
 )

(defn tc [wndtime numwnds threshold & children]
  (fixed-event-window wndtime
     (combine folds/mean
         (moving-event-window numwnds
            (combine folds/minimum
               (where (> metric threshold)
                 ;;create a threshold crossing event
                 (with {
                   :host nil
                   :state "threshold crossed"
                   :description (str
                     "service  crossed the value of " threshold " over " numwnds " windows of " wndtime " seconds")}
                        (apply sdo children)))))))
)

;(streams
;    (tc 3 3 6.0
;       (email "ops@amaret.net"))
;)



(logging/init {:file "/home/ops/riemann/riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "10.0.0.11"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 minutes.
(periodically-expire 300)

(let [index (index)]
  ; Inbound events will be passed to these streams:
    (streams

        index

        ;(where (service #"riemann .+")
	;	(percentiles 5 [0.5 0.95 0.99]
                        ; Percentiles will emit events like 
                        ; {:service "api req 0.5" :metric 0.12}
                        ; We ll add them to the index, so they can show up
                        ; on our dashboard.

        ;                index)
        ;)
       ; (where (host #"ip-.+")
       ;     (clock-skew
       ;         (with {:service "clock-skew" :state "ok"}
       ;             (percentiles 5 [0.5 0.95 0.99]
       ;                     index))))


       ; get redis keyspace size
       (where (tagged "riemann-redis-keyspace")
         (smap
         (fn [event]
             (let [stringthing (format "%s" (:state event)) keys (num-redis-keys stringthing)]
 		     riemann.common/event {:service "redis_queue_size"
                                           :time  (:time event)
 		                           :metric keys 
					   :host (:host event)
		                           :description "num-keys-redis-db"
					   }
 	     )
	  )
	  #(info %) 
	  index
          )
       )


      (expired #(warn "expired" %))

      ; Calculate an overall rate of events.
      ;(where (host "ip-10-0-0-11") 
        ;(with {:metric 1 :host nil :state "ok" :service "events_per_sec"}
        ;(with {:metric 1 :service "events_per_sec"}
      ;  (with {:metric 1}
      ;      (rate 5 index)
      ;  )
      ;)

      ; influxdb series
        (fn [event]
            (let [series (format "%s.%s" (:host event) (:service event))]
                (influx series {
                    :time  (:time event)
                    :value (:metric event)
                })
            )
        )

      ; email bad news
      ; (where (state "critical") tell-ops)

      ; email possibly bad news
      ; (where (state "warning") tell-ops)

      ; threshold crossed
      ; (tc 3 3 6.0
      ;     (email "ops@amaret.net"))

      ; Log event to the console, or not.
       	#(info %)

      ; Log expired events.
        (expired
            (fn [event] (info "expired" event)
            )
        )
   )
)
